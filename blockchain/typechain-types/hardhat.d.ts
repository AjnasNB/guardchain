/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC4906",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC4906__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Burnable__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IAppealSystem",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAppealSystem__factory>;
    getContractFactory(
      name: "AppealSystemImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AppealSystemImpl__factory>;
    getContractFactory(
      name: "ChainSureClaimsEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainSureClaimsEngine__factory>;
    getContractFactory(
      name: "ChainSureGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainSureGovernance__factory>;
    getContractFactory(
      name: "ChainSureGovernanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainSureGovernanceToken__factory>;
    getContractFactory(
      name: "ChainSurePolicyNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainSurePolicyNFT__factory>;
    getContractFactory(
      name: "ChainSureStablecoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainSureStablecoin__factory>;
    getContractFactory(
      name: "ChainSureSurplusDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ChainSureSurplusDistributor__factory>;
    getContractFactory(
      name: "IJuryOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IJuryOracle__factory>;
    getContractFactory(
      name: "JuryOracleImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JuryOracleImpl__factory>;
    getContractFactory(
      name: "IParametricTriggers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IParametricTriggers__factory>;
    getContractFactory(
      name: "ParametricTriggersImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParametricTriggersImpl__factory>;
    getContractFactory(
      name: "IVoteTally",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoteTally__factory>;
    getContractFactory(
      name: "VoteTallyImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoteTallyImpl__factory>;

    getContractAt(
      name: "AggregatorV3Interface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC4906",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC4906>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Burnable>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IAppealSystem",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAppealSystem>;
    getContractAt(
      name: "AppealSystemImpl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AppealSystemImpl>;
    getContractAt(
      name: "ChainSureClaimsEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainSureClaimsEngine>;
    getContractAt(
      name: "ChainSureGovernance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainSureGovernance>;
    getContractAt(
      name: "ChainSureGovernanceToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainSureGovernanceToken>;
    getContractAt(
      name: "ChainSurePolicyNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainSurePolicyNFT>;
    getContractAt(
      name: "ChainSureStablecoin",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainSureStablecoin>;
    getContractAt(
      name: "ChainSureSurplusDistributor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ChainSureSurplusDistributor>;
    getContractAt(
      name: "IJuryOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IJuryOracle>;
    getContractAt(
      name: "JuryOracleImpl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.JuryOracleImpl>;
    getContractAt(
      name: "IParametricTriggers",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IParametricTriggers>;
    getContractAt(
      name: "ParametricTriggersImpl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ParametricTriggersImpl>;
    getContractAt(
      name: "IVoteTally",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoteTally>;
    getContractAt(
      name: "VoteTallyImpl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VoteTallyImpl>;

    deployContract(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC4906",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC4906>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ERC721Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Burnable>;
    deployContract(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721URIStorage>;
    deployContract(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IAppealSystem",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAppealSystem>;
    deployContract(
      name: "AppealSystemImpl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppealSystemImpl>;
    deployContract(
      name: "ChainSureClaimsEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSureClaimsEngine>;
    deployContract(
      name: "ChainSureGovernance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSureGovernance>;
    deployContract(
      name: "ChainSureGovernanceToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSureGovernanceToken>;
    deployContract(
      name: "ChainSurePolicyNFT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSurePolicyNFT>;
    deployContract(
      name: "ChainSureStablecoin",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSureStablecoin>;
    deployContract(
      name: "ChainSureSurplusDistributor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSureSurplusDistributor>;
    deployContract(
      name: "IJuryOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IJuryOracle>;
    deployContract(
      name: "JuryOracleImpl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.JuryOracleImpl>;
    deployContract(
      name: "IParametricTriggers",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IParametricTriggers>;
    deployContract(
      name: "ParametricTriggersImpl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ParametricTriggersImpl>;
    deployContract(
      name: "IVoteTally",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVoteTally>;
    deployContract(
      name: "VoteTallyImpl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VoteTallyImpl>;

    deployContract(
      name: "AggregatorV3Interface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AggregatorV3Interface>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC4906",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC4906>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721>;
    deployContract(
      name: "ERC721Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Burnable>;
    deployContract(
      name: "ERC721URIStorage",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721URIStorage>;
    deployContract(
      name: "IERC721Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Metadata>;
    deployContract(
      name: "IERC721",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IAppealSystem",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAppealSystem>;
    deployContract(
      name: "AppealSystemImpl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AppealSystemImpl>;
    deployContract(
      name: "ChainSureClaimsEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSureClaimsEngine>;
    deployContract(
      name: "ChainSureGovernance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSureGovernance>;
    deployContract(
      name: "ChainSureGovernanceToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSureGovernanceToken>;
    deployContract(
      name: "ChainSurePolicyNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSurePolicyNFT>;
    deployContract(
      name: "ChainSureStablecoin",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSureStablecoin>;
    deployContract(
      name: "ChainSureSurplusDistributor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ChainSureSurplusDistributor>;
    deployContract(
      name: "IJuryOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IJuryOracle>;
    deployContract(
      name: "JuryOracleImpl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.JuryOracleImpl>;
    deployContract(
      name: "IParametricTriggers",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IParametricTriggers>;
    deployContract(
      name: "ParametricTriggersImpl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ParametricTriggersImpl>;
    deployContract(
      name: "IVoteTally",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVoteTally>;
    deployContract(
      name: "VoteTallyImpl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VoteTallyImpl>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
