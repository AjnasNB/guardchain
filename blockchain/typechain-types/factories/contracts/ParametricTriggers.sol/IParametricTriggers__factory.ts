/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IParametricTriggers,
  IParametricTriggersInterface,
} from "../../../contracts/ParametricTriggers.sol/IParametricTriggers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "policyId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "transactionHash",
        type: "bytes32",
      },
    ],
    name: "ParametricPayout",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "policyId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "conditionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "payoutAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "TriggerActivated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "policyId",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "oracle",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "dataFeedId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "threshold",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "comparisonType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "payoutAmount",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
        ],
        internalType: "struct IParametricTriggers.TriggerCondition",
        name: "condition",
        type: "tuple",
      },
    ],
    name: "addTriggerCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "policyId",
        type: "bytes32",
      },
    ],
    name: "checkTriggers",
    outputs: [
      {
        internalType: "bool",
        name: "triggered",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "policyId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeParametricPayout",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "policyId",
        type: "bytes32",
      },
    ],
    name: "getAvailablePayout",
    outputs: [
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "policyId",
        type: "bytes32",
      },
    ],
    name: "getPolicyTriggers",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "policyId",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "address",
                name: "oracle",
                type: "address",
              },
              {
                internalType: "bytes32",
                name: "dataFeedId",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "threshold",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "comparisonType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "payoutAmount",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "active",
                type: "bool",
              },
            ],
            internalType: "struct IParametricTriggers.TriggerCondition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "totalPayoutCap",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "usedPayout",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
        ],
        internalType: "struct IParametricTriggers.PolicyTriggers",
        name: "triggers",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "policyId",
        type: "bytes32",
      },
    ],
    name: "hasActiveTriggers",
    outputs: [
      {
        internalType: "bool",
        name: "hasActive",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "policyId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "conditionIndex",
        type: "uint256",
      },
    ],
    name: "removeTriggerCondition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IParametricTriggers__factory {
  static readonly abi = _abi;
  static createInterface(): IParametricTriggersInterface {
    return new Interface(_abi) as IParametricTriggersInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IParametricTriggers {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IParametricTriggers;
  }
}
