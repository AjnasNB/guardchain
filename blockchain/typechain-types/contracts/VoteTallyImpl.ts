/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IVoteTally {
  export type WeightsConfigStruct = {
    baseBps: BigNumberish;
    stakeLightBps: BigNumberish;
    stakeHeavyBps: BigNumberish;
    localitySameBps: BigNumberish;
    expertiseMatchBps: BigNumberish;
    wMaxBps: BigNumberish;
  };

  export type WeightsConfigStructOutput = [
    baseBps: bigint,
    stakeLightBps: bigint,
    stakeHeavyBps: bigint,
    localitySameBps: bigint,
    expertiseMatchBps: bigint,
    wMaxBps: bigint
  ] & {
    baseBps: bigint;
    stakeLightBps: bigint;
    stakeHeavyBps: bigint;
    localitySameBps: bigint;
    expertiseMatchBps: bigint;
    wMaxBps: bigint;
  };

  export type TalliedStruct = {
    payoutBps: BigNumberish;
    verdict: BigNumberish;
    quorum: BigNumberish;
    required: BigNumberish;
  };

  export type TalliedStructOutput = [
    payoutBps: bigint,
    verdict: bigint,
    quorum: bigint,
    required: bigint
  ] & { payoutBps: bigint; verdict: bigint; quorum: bigint; required: bigint };
}

export interface VoteTallyImplInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "config"
      | "getConfig"
      | "governance"
      | "governanceToken"
      | "tally"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tally",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      boolean[],
      boolean[],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tally", data: BytesLike): Result;
}

export interface VoteTallyImpl extends BaseContract {
  connect(runner?: ContractRunner | null): VoteTallyImpl;
  waitForDeployment(): Promise<this>;

  interface: VoteTallyImplInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  config: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        baseBps: bigint;
        stakeLightBps: bigint;
        stakeHeavyBps: bigint;
        localitySameBps: bigint;
        expertiseMatchBps: bigint;
        wMaxBps: bigint;
      }
    ],
    "view"
  >;

  getConfig: TypedContractMethod<
    [],
    [IVoteTally.WeightsConfigStructOutput],
    "view"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  governanceToken: TypedContractMethod<[], [string], "view">;

  tally: TypedContractMethod<
    [
      payoutBps: BigNumberish[],
      confidenceBps: BigNumberish[],
      repBps: BigNumberish[],
      stakeTier: BigNumberish[],
      isLocal: boolean[],
      hasExpertise: boolean[],
      quorumRequired: BigNumberish
    ],
    [IVoteTally.TalliedStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "config"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        baseBps: bigint;
        stakeLightBps: bigint;
        stakeHeavyBps: bigint;
        localitySameBps: bigint;
        expertiseMatchBps: bigint;
        wMaxBps: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<[], [IVoteTally.WeightsConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tally"
  ): TypedContractMethod<
    [
      payoutBps: BigNumberish[],
      confidenceBps: BigNumberish[],
      repBps: BigNumberish[],
      stakeTier: BigNumberish[],
      isLocal: boolean[],
      hasExpertise: boolean[],
      quorumRequired: BigNumberish
    ],
    [IVoteTally.TalliedStructOutput],
    "view"
  >;

  filters: {};
}
