/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ChainSureGovernanceToken {
  export type StakeInfoStruct = {
    amount: BigNumberish;
    lockUntil: BigNumberish;
    isJuryStake: boolean;
    rewardDebt: BigNumberish;
  };

  export type StakeInfoStructOutput = [
    amount: bigint,
    lockUntil: bigint,
    isJuryStake: boolean,
    rewardDebt: bigint
  ] & {
    amount: bigint;
    lockUntil: bigint;
    isJuryStake: boolean;
    rewardDebt: bigint;
  };
}

export interface ChainSureGovernanceTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GOVERNANCE_STAKE_PERIOD"
      | "JURY_STAKE_PERIOD"
      | "MIN_STAKE_PERIOD"
      | "activeJurors"
      | "addToRewardPool"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "canBeJuror"
      | "decimals"
      | "decreaseAllowance"
      | "distributeRewards"
      | "getActiveJurorsCount"
      | "getStakeInfo"
      | "getVotes"
      | "increaseAllowance"
      | "juryPool"
      | "juryReputationScore"
      | "juryRewardRate"
      | "juryStakeRequirement"
      | "maxJurySize"
      | "name"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "reputationThreshold"
      | "rewardPool"
      | "selectJurors"
      | "slashTokens"
      | "slashedTokens"
      | "slashingRate"
      | "stakeTokens"
      | "stakes"
      | "symbol"
      | "totalRewardsEarned"
      | "totalStaked"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "unstakeTokens"
      | "updateJuryStakeRequirement"
      | "updateMaxJurySize"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "JuryPoolJoined"
      | "JuryPoolLeft"
      | "OwnershipTransferred"
      | "Paused"
      | "RewardsDistributed"
      | "TokensSlashed"
      | "TokensStaked"
      | "TokensUnstaked"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GOVERNANCE_STAKE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "JURY_STAKE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_STAKE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeJurors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToRewardPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canBeJuror",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [AddressLike[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveJurorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "juryPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "juryReputationScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "juryRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "juryStakeRequirement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxJurySize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectJurors",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slashTokens",
    values: [AddressLike[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "slashedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slashingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeTokens",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRewardsEarned",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstakeTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateJuryStakeRequirement",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxJurySize",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "GOVERNANCE_STAKE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "JURY_STAKE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_STAKE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeJurors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canBeJuror", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveJurorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "juryPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "juryReputationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "juryRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "juryStakeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxJurySize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selectJurors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJuryStakeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxJurySize",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JuryPoolJoinedEvent {
  export type InputTuple = [juror: AddressLike, stakedAmount: BigNumberish];
  export type OutputTuple = [juror: string, stakedAmount: bigint];
  export interface OutputObject {
    juror: string;
    stakedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JuryPoolLeftEvent {
  export type InputTuple = [juror: AddressLike, unstakedAmount: BigNumberish];
  export type OutputTuple = [juror: string, unstakedAmount: bigint];
  export interface OutputObject {
    juror: string;
    unstakedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [recipient: string, amount: bigint, reason: string];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensSlashedEvent {
  export type InputTuple = [
    slashed: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [slashed: string, amount: bigint, reason: string];
  export interface OutputObject {
    slashed: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensStakedEvent {
  export type InputTuple = [
    staker: AddressLike,
    amount: BigNumberish,
    lockPeriod: BigNumberish
  ];
  export type OutputTuple = [
    staker: string,
    amount: bigint,
    lockPeriod: bigint
  ];
  export interface OutputObject {
    staker: string;
    amount: bigint;
    lockPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensUnstakedEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainSureGovernanceToken extends BaseContract {
  connect(runner?: ContractRunner | null): ChainSureGovernanceToken;
  waitForDeployment(): Promise<this>;

  interface: ChainSureGovernanceTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GOVERNANCE_STAKE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  JURY_STAKE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  MIN_STAKE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  activeJurors: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addToRewardPool: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  burnFrom: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  canBeJuror: TypedContractMethod<[potential: AddressLike], [boolean], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  distributeRewards: TypedContractMethod<
    [recipients: AddressLike[], amounts: BigNumberish[], reason: string],
    [void],
    "nonpayable"
  >;

  getActiveJurorsCount: TypedContractMethod<[], [bigint], "view">;

  getStakeInfo: TypedContractMethod<
    [staker: AddressLike],
    [ChainSureGovernanceToken.StakeInfoStructOutput],
    "view"
  >;

  getVotes: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  juryPool: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  juryReputationScore: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  juryRewardRate: TypedContractMethod<[], [bigint], "view">;

  juryStakeRequirement: TypedContractMethod<[], [bigint], "view">;

  maxJurySize: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputationThreshold: TypedContractMethod<[], [bigint], "view">;

  rewardPool: TypedContractMethod<[], [bigint], "view">;

  selectJurors: TypedContractMethod<
    [claimId: BytesLike, jurySize: BigNumberish],
    [string[]],
    "view"
  >;

  slashTokens: TypedContractMethod<
    [maliciousActors: AddressLike[], amounts: BigNumberish[], reason: string],
    [void],
    "nonpayable"
  >;

  slashedTokens: TypedContractMethod<[], [bigint], "view">;

  slashingRate: TypedContractMethod<[], [bigint], "view">;

  stakeTokens: TypedContractMethod<
    [amount: BigNumberish, lockPeriod: BigNumberish, forJury: boolean],
    [void],
    "nonpayable"
  >;

  stakes: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean, bigint] & {
        amount: bigint;
        lockUntil: bigint;
        isJuryStake: boolean;
        rewardDebt: bigint;
      }
    ],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalRewardsEarned: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  totalStaked: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unstakeTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateJuryStakeRequirement: TypedContractMethod<
    [newRequirement: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaxJurySize: TypedContractMethod<
    [newMaxSize: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GOVERNANCE_STAKE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "JURY_STAKE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_STAKE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activeJurors"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addToRewardPool"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnFrom"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canBeJuror"
  ): TypedContractMethod<[potential: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<
    [recipients: AddressLike[], amounts: BigNumberish[], reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveJurorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakeInfo"
  ): TypedContractMethod<
    [staker: AddressLike],
    [ChainSureGovernanceToken.StakeInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "juryPool"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "juryReputationScore"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "juryRewardRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "juryStakeRequirement"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxJurySize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputationThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "selectJurors"
  ): TypedContractMethod<
    [claimId: BytesLike, jurySize: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "slashTokens"
  ): TypedContractMethod<
    [maliciousActors: AddressLike[], amounts: BigNumberish[], reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slashedTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "slashingRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeTokens"
  ): TypedContractMethod<
    [amount: BigNumberish, lockPeriod: BigNumberish, forJury: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean, bigint] & {
        amount: bigint;
        lockUntil: bigint;
        isJuryStake: boolean;
        rewardDebt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalRewardsEarned"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstakeTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateJuryStakeRequirement"
  ): TypedContractMethod<[newRequirement: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxJurySize"
  ): TypedContractMethod<[newMaxSize: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "JuryPoolJoined"
  ): TypedContractEvent<
    JuryPoolJoinedEvent.InputTuple,
    JuryPoolJoinedEvent.OutputTuple,
    JuryPoolJoinedEvent.OutputObject
  >;
  getEvent(
    key: "JuryPoolLeft"
  ): TypedContractEvent<
    JuryPoolLeftEvent.InputTuple,
    JuryPoolLeftEvent.OutputTuple,
    JuryPoolLeftEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "TokensSlashed"
  ): TypedContractEvent<
    TokensSlashedEvent.InputTuple,
    TokensSlashedEvent.OutputTuple,
    TokensSlashedEvent.OutputObject
  >;
  getEvent(
    key: "TokensStaked"
  ): TypedContractEvent<
    TokensStakedEvent.InputTuple,
    TokensStakedEvent.OutputTuple,
    TokensStakedEvent.OutputObject
  >;
  getEvent(
    key: "TokensUnstaked"
  ): TypedContractEvent<
    TokensUnstakedEvent.InputTuple,
    TokensUnstakedEvent.OutputTuple,
    TokensUnstakedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "JuryPoolJoined(address,uint256)": TypedContractEvent<
      JuryPoolJoinedEvent.InputTuple,
      JuryPoolJoinedEvent.OutputTuple,
      JuryPoolJoinedEvent.OutputObject
    >;
    JuryPoolJoined: TypedContractEvent<
      JuryPoolJoinedEvent.InputTuple,
      JuryPoolJoinedEvent.OutputTuple,
      JuryPoolJoinedEvent.OutputObject
    >;

    "JuryPoolLeft(address,uint256)": TypedContractEvent<
      JuryPoolLeftEvent.InputTuple,
      JuryPoolLeftEvent.OutputTuple,
      JuryPoolLeftEvent.OutputObject
    >;
    JuryPoolLeft: TypedContractEvent<
      JuryPoolLeftEvent.InputTuple,
      JuryPoolLeftEvent.OutputTuple,
      JuryPoolLeftEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RewardsDistributed(address,uint256,string)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "TokensSlashed(address,uint256,string)": TypedContractEvent<
      TokensSlashedEvent.InputTuple,
      TokensSlashedEvent.OutputTuple,
      TokensSlashedEvent.OutputObject
    >;
    TokensSlashed: TypedContractEvent<
      TokensSlashedEvent.InputTuple,
      TokensSlashedEvent.OutputTuple,
      TokensSlashedEvent.OutputObject
    >;

    "TokensStaked(address,uint256,uint256)": TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;
    TokensStaked: TypedContractEvent<
      TokensStakedEvent.InputTuple,
      TokensStakedEvent.OutputTuple,
      TokensStakedEvent.OutputObject
    >;

    "TokensUnstaked(address,uint256)": TypedContractEvent<
      TokensUnstakedEvent.InputTuple,
      TokensUnstakedEvent.OutputTuple,
      TokensUnstakedEvent.OutputObject
    >;
    TokensUnstaked: TypedContractEvent<
      TokensUnstakedEvent.InputTuple,
      TokensUnstakedEvent.OutputTuple,
      TokensUnstakedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
