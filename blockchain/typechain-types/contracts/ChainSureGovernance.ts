/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ChainSureGovernance {
  export type VoteStruct = {
    support: boolean;
    votes: BigNumberish;
    reason: string;
  };

  export type VoteStructOutput = [
    support: boolean,
    votes: bigint,
    reason: string
  ] & { support: boolean; votes: bigint; reason: string };
}

export interface ChainSureGovernanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEmergencyGovernor"
      | "cancel"
      | "castVote"
      | "castVoteBySig"
      | "claimsEngine"
      | "emergencyGovernors"
      | "emergencyPause"
      | "emergencyUnpause"
      | "emergencyVotingPeriod"
      | "execute"
      | "executionDelay"
      | "getProposal"
      | "getProposalState"
      | "getVote"
      | "governanceToken"
      | "guardian"
      | "guardianPaused"
      | "hasVoted"
      | "nextProposalId"
      | "owner"
      | "paused"
      | "policyNFT"
      | "proposalMaxOperations"
      | "proposals"
      | "propose"
      | "proposeSlashing"
      | "removeEmergencyGovernor"
      | "renounceOwnership"
      | "surplusDistributor"
      | "thresholds"
      | "transferOwnership"
      | "updateExecutionDelay"
      | "updateGuardian"
      | "updateThresholds"
      | "updateVotingPeriod"
      | "votingPeriod"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "Paused"
      | "ProposalCancelled"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "QuorumUpdated"
      | "Unpaused"
      | "VoteCast"
      | "VotingPeriodUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addEmergencyGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, boolean, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimsEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyGovernors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyVotingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "guardianPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "policyNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [BigNumberish, string, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeSlashing",
    values: [AddressLike[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEmergencyGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surplusDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "thresholds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecutionDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGuardian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateThresholds",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addEmergencyGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimsEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyGovernors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeSlashing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEmergencyGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "surplusDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "thresholds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecutionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCancelledEvent {
  export type InputTuple = [proposalId: BigNumberish, reason: string];
  export type OutputTuple = [proposalId: bigint, reason: string];
  export interface OutputObject {
    proposalId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    proposer: AddressLike,
    proposalType: BigNumberish,
    description: string,
    votingStart: BigNumberish,
    votingEnd: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    proposer: string,
    proposalType: bigint,
    description: string,
    votingStart: bigint,
    votingEnd: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    proposer: string;
    proposalType: bigint;
    description: string;
    votingStart: bigint;
    votingEnd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish, successful: boolean];
  export type OutputTuple = [proposalId: bigint, successful: boolean];
  export interface OutputObject {
    proposalId: bigint;
    successful: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumUpdatedEvent {
  export type InputTuple = [oldQuorum: BigNumberish, newQuorum: BigNumberish];
  export type OutputTuple = [oldQuorum: bigint, newQuorum: bigint];
  export interface OutputObject {
    oldQuorum: bigint;
    newQuorum: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    support: boolean,
    votes: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    support: boolean,
    votes: bigint,
    reason: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    support: boolean;
    votes: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPeriodUpdatedEvent {
  export type InputTuple = [oldPeriod: BigNumberish, newPeriod: BigNumberish];
  export type OutputTuple = [oldPeriod: bigint, newPeriod: bigint];
  export interface OutputObject {
    oldPeriod: bigint;
    newPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainSureGovernance extends BaseContract {
  connect(runner?: ContractRunner | null): ChainSureGovernance;
  waitForDeployment(): Promise<this>;

  interface: ChainSureGovernanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEmergencyGovernor: TypedContractMethod<
    [governor: AddressLike],
    [void],
    "nonpayable"
  >;

  cancel: TypedContractMethod<
    [proposalId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [proposalId: BigNumberish, support: boolean, reason: string],
    [void],
    "nonpayable"
  >;

  castVoteBySig: TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: boolean,
      reason: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  claimsEngine: TypedContractMethod<[], [string], "view">;

  emergencyGovernors: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyVotingPeriod: TypedContractMethod<[], [bigint], "view">;

  execute: TypedContractMethod<[proposalId: BigNumberish], [void], "payable">;

  executionDelay: TypedContractMethod<[], [bigint], "view">;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [string, bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        proposer: string;
        proposalType: bigint;
        status: bigint;
        description: string;
        votingStart: bigint;
        votingEnd: bigint;
        forVotes: bigint;
        againstVotes: bigint;
      }
    ],
    "view"
  >;

  getProposalState: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  getVote: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [ChainSureGovernance.VoteStructOutput],
    "view"
  >;

  governanceToken: TypedContractMethod<[], [string], "view">;

  guardian: TypedContractMethod<[], [string], "view">;

  guardianPaused: TypedContractMethod<[], [boolean], "view">;

  hasVoted: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  nextProposalId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  policyNFT: TypedContractMethod<[], [string], "view">;

  proposalMaxOperations: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        proposalId: bigint;
        proposer: string;
        proposalType: bigint;
        status: bigint;
        description: string;
        executionData: string;
        targetContract: string;
        votingStart: bigint;
        votingEnd: bigint;
        executionDelay: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  propose: TypedContractMethod<
    [
      proposalType: BigNumberish,
      description: string,
      targetContract: AddressLike,
      executionData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  proposeSlashing: TypedContractMethod<
    [targets: AddressLike[], amounts: BigNumberish[], reason: string],
    [bigint],
    "nonpayable"
  >;

  removeEmergencyGovernor: TypedContractMethod<
    [governor: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  surplusDistributor: TypedContractMethod<[], [string], "view">;

  thresholds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        proposalThreshold: bigint;
        quorumThreshold: bigint;
        approvalThreshold: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateExecutionDelay: TypedContractMethod<
    [newDelay: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateGuardian: TypedContractMethod<
    [newGuardian: AddressLike],
    [void],
    "nonpayable"
  >;

  updateThresholds: TypedContractMethod<
    [
      proposalType: BigNumberish,
      proposalThreshold: BigNumberish,
      quorumThreshold: BigNumberish,
      approvalThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateVotingPeriod: TypedContractMethod<
    [newVotingPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  votingPeriod: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEmergencyGovernor"
  ): TypedContractMethod<[governor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<
    [proposalId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, support: boolean, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteBySig"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      support: boolean,
      reason: string,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimsEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyGovernors"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyVotingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "executionDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [string, bigint, bigint, string, bigint, bigint, bigint, bigint] & {
        proposer: string;
        proposalType: bigint;
        status: bigint;
        description: string;
        votingStart: bigint;
        votingEnd: bigint;
        forVotes: bigint;
        againstVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalState"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVote"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [ChainSureGovernance.VoteStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "governanceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "guardian"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "guardianPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextProposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "policyNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalMaxOperations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        proposalId: bigint;
        proposer: string;
        proposalType: bigint;
        status: bigint;
        description: string;
        executionData: string;
        targetContract: string;
        votingStart: bigint;
        votingEnd: bigint;
        executionDelay: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "propose"
  ): TypedContractMethod<
    [
      proposalType: BigNumberish,
      description: string,
      targetContract: AddressLike,
      executionData: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeSlashing"
  ): TypedContractMethod<
    [targets: AddressLike[], amounts: BigNumberish[], reason: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeEmergencyGovernor"
  ): TypedContractMethod<[governor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "surplusDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "thresholds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        proposalThreshold: bigint;
        quorumThreshold: bigint;
        approvalThreshold: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateExecutionDelay"
  ): TypedContractMethod<[newDelay: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateGuardian"
  ): TypedContractMethod<[newGuardian: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateThresholds"
  ): TypedContractMethod<
    [
      proposalType: BigNumberish,
      proposalThreshold: BigNumberish,
      quorumThreshold: BigNumberish,
      approvalThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVotingPeriod"
  ): TypedContractMethod<[newVotingPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "votingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCancelled"
  ): TypedContractEvent<
    ProposalCancelledEvent.InputTuple,
    ProposalCancelledEvent.OutputTuple,
    ProposalCancelledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "QuorumUpdated"
  ): TypedContractEvent<
    QuorumUpdatedEvent.InputTuple,
    QuorumUpdatedEvent.OutputTuple,
    QuorumUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingPeriodUpdated"
  ): TypedContractEvent<
    VotingPeriodUpdatedEvent.InputTuple,
    VotingPeriodUpdatedEvent.OutputTuple,
    VotingPeriodUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProposalCancelled(uint256,string)": TypedContractEvent<
      ProposalCancelledEvent.InputTuple,
      ProposalCancelledEvent.OutputTuple,
      ProposalCancelledEvent.OutputObject
    >;
    ProposalCancelled: TypedContractEvent<
      ProposalCancelledEvent.InputTuple,
      ProposalCancelledEvent.OutputTuple,
      ProposalCancelledEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,uint8,string,uint256,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256,bool)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "QuorumUpdated(uint256,uint256)": TypedContractEvent<
      QuorumUpdatedEvent.InputTuple,
      QuorumUpdatedEvent.OutputTuple,
      QuorumUpdatedEvent.OutputObject
    >;
    QuorumUpdated: TypedContractEvent<
      QuorumUpdatedEvent.InputTuple,
      QuorumUpdatedEvent.OutputTuple,
      QuorumUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool,uint256,string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingPeriodUpdated(uint256,uint256)": TypedContractEvent<
      VotingPeriodUpdatedEvent.InputTuple,
      VotingPeriodUpdatedEvent.OutputTuple,
      VotingPeriodUpdatedEvent.OutputObject
    >;
    VotingPeriodUpdated: TypedContractEvent<
      VotingPeriodUpdatedEvent.InputTuple,
      VotingPeriodUpdatedEvent.OutputTuple,
      VotingPeriodUpdatedEvent.OutputObject
    >;
  };
}
