/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ChainSurePolicyNFT {
  export type ClaimHistoryStruct = {
    claimId: BigNumberish;
    amount: BigNumberish;
    timestamp: BigNumberish;
    claimant: AddressLike;
    approved: boolean;
  };

  export type ClaimHistoryStructOutput = [
    claimId: bigint,
    amount: bigint,
    timestamp: bigint,
    claimant: string,
    approved: boolean
  ] & {
    claimId: bigint;
    amount: bigint;
    timestamp: bigint;
    claimant: string;
    approved: boolean;
  };

  export type PolicyDataStruct = {
    policyType: BigNumberish;
    status: BigNumberish;
    policyholder: AddressLike;
    beneficiary: AddressLike;
    coverageAmount: BigNumberish;
    premium: BigNumberish;
    creationDate: BigNumberish;
    expiryDate: BigNumberish;
    claimedAmount: BigNumberish;
    coverageTerms: string;
    ipfsHash: BytesLike;
  };

  export type PolicyDataStructOutput = [
    policyType: bigint,
    status: bigint,
    policyholder: string,
    beneficiary: string,
    coverageAmount: bigint,
    premium: bigint,
    creationDate: bigint,
    expiryDate: bigint,
    claimedAmount: bigint,
    coverageTerms: string,
    ipfsHash: string
  ] & {
    policyType: bigint;
    status: bigint;
    policyholder: string;
    beneficiary: string;
    coverageAmount: bigint;
    premium: bigint;
    creationDate: bigint;
    expiryDate: bigint;
    claimedAmount: bigint;
    coverageTerms: string;
    ipfsHash: string;
  };
}

export interface ChainSurePolicyNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PREMIUM_DECIMALS"
      | "approve"
      | "balanceOf"
      | "basePremiumRates"
      | "burn"
      | "calculatePremium"
      | "claimHistory"
      | "createPolicy"
      | "defaultTermLength"
      | "getApproved"
      | "getClaimHistory"
      | "getPolicyData"
      | "getRemainingCoverage"
      | "getUserPolicies"
      | "isApprovedForAll"
      | "isPolicyActive"
      | "maxCoverageAmounts"
      | "name"
      | "owner"
      | "ownerOf"
      | "pause"
      | "paused"
      | "platformFee"
      | "policies"
      | "processClaim"
      | "renewPolicy"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "stablecoin"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "transferOwnership"
      | "treasuryAddress"
      | "unpause"
      | "updateBasePremiumRate"
      | "updateBeneficiary"
      | "updateMaxCoverageAmount"
      | "updatePlatformFee"
      | "updateTreasuryAddress"
      | "userPolicies"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "BeneficiaryUpdated"
      | "MetadataUpdate"
      | "OwnershipTransferred"
      | "Paused"
      | "PolicyClaimed"
      | "PolicyCreated"
      | "PolicyRenewed"
      | "PremiumPaid"
      | "Transfer"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PREMIUM_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "basePremiumRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "calculatePremium",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      string,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultTermLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingCoverage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPolicies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPolicyActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCoverageAmounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "policies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processClaim",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renewPolicy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBasePremiumRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeneficiary",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxCoverageAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasuryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPolicies",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PREMIUM_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basePremiumRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultTermLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingCoverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPolicyActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCoverageAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBasePremiumRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxCoverageAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPolicies",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeneficiaryUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish, newBeneficiary: AddressLike];
  export type OutputTuple = [tokenId: bigint, newBeneficiary: string];
  export interface OutputObject {
    tokenId: bigint;
    newBeneficiary: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyClaimedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    claimAmount: BigNumberish,
    claimant: AddressLike
  ];
  export type OutputTuple = [
    tokenId: bigint,
    claimAmount: bigint,
    claimant: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    claimAmount: bigint;
    claimant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    policyholder: AddressLike,
    policyType: BigNumberish,
    coverageAmount: BigNumberish,
    premium: BigNumberish,
    expiryDate: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    policyholder: string,
    policyType: bigint,
    coverageAmount: bigint,
    premium: bigint,
    expiryDate: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    policyholder: string;
    policyType: bigint;
    coverageAmount: bigint;
    premium: bigint;
    expiryDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyRenewedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    newExpiryDate: BigNumberish,
    renewalPremium: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    newExpiryDate: bigint,
    renewalPremium: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    newExpiryDate: bigint;
    renewalPremium: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PremiumPaidEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    amount: BigNumberish,
    payer: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, amount: bigint, payer: string];
  export interface OutputObject {
    tokenId: bigint;
    amount: bigint;
    payer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainSurePolicyNFT extends BaseContract {
  connect(runner?: ContractRunner | null): ChainSurePolicyNFT;
  waitForDeployment(): Promise<this>;

  interface: ChainSurePolicyNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PREMIUM_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  basePremiumRates: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  calculatePremium: TypedContractMethod<
    [policyType: BigNumberish, coverageAmount: BigNumberish],
    [bigint],
    "view"
  >;

  claimHistory: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, string, boolean] & {
        claimId: bigint;
        amount: bigint;
        timestamp: bigint;
        claimant: string;
        approved: boolean;
      }
    ],
    "view"
  >;

  createPolicy: TypedContractMethod<
    [
      to: AddressLike,
      policyType: BigNumberish,
      coverageAmount: BigNumberish,
      beneficiary: AddressLike,
      coverageTerms: string,
      ipfsHash: BytesLike,
      customTermLength: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  defaultTermLength: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getClaimHistory: TypedContractMethod<
    [tokenId: BigNumberish],
    [ChainSurePolicyNFT.ClaimHistoryStructOutput[]],
    "view"
  >;

  getPolicyData: TypedContractMethod<
    [tokenId: BigNumberish],
    [ChainSurePolicyNFT.PolicyDataStructOutput],
    "view"
  >;

  getRemainingCoverage: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getUserPolicies: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isPolicyActive: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  maxCoverageAmounts: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  policies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        policyType: bigint;
        status: bigint;
        policyholder: string;
        beneficiary: string;
        coverageAmount: bigint;
        premium: bigint;
        creationDate: bigint;
        expiryDate: bigint;
        claimedAmount: bigint;
        coverageTerms: string;
        ipfsHash: string;
      }
    ],
    "view"
  >;

  processClaim: TypedContractMethod<
    [
      tokenId: BigNumberish,
      claimAmount: BigNumberish,
      claimant: AddressLike,
      claimId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renewPolicy: TypedContractMethod<
    [tokenId: BigNumberish, additionalTermLength: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  stablecoin: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryAddress: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateBasePremiumRate: TypedContractMethod<
    [policyType: BigNumberish, newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateBeneficiary: TypedContractMethod<
    [tokenId: BigNumberish, newBeneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMaxCoverageAmount: TypedContractMethod<
    [policyType: BigNumberish, newAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateTreasuryAddress: TypedContractMethod<
    [newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  userPolicies: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PREMIUM_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "basePremiumRates"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "calculatePremium"
  ): TypedContractMethod<
    [policyType: BigNumberish, coverageAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, string, boolean] & {
        claimId: bigint;
        amount: bigint;
        timestamp: bigint;
        claimant: string;
        approved: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createPolicy"
  ): TypedContractMethod<
    [
      to: AddressLike,
      policyType: BigNumberish,
      coverageAmount: BigNumberish,
      beneficiary: AddressLike,
      coverageTerms: string,
      ipfsHash: BytesLike,
      customTermLength: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultTermLength"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getClaimHistory"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [ChainSurePolicyNFT.ClaimHistoryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPolicyData"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [ChainSurePolicyNFT.PolicyDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRemainingCoverage"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPolicies"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPolicyActive"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxCoverageAmounts"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "policies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string
      ] & {
        policyType: bigint;
        status: bigint;
        policyholder: string;
        beneficiary: string;
        coverageAmount: bigint;
        premium: bigint;
        creationDate: bigint;
        expiryDate: bigint;
        claimedAmount: bigint;
        coverageTerms: string;
        ipfsHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "processClaim"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      claimAmount: BigNumberish,
      claimant: AddressLike,
      claimId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renewPolicy"
  ): TypedContractMethod<
    [tokenId: BigNumberish, additionalTermLength: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stablecoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBasePremiumRate"
  ): TypedContractMethod<
    [policyType: BigNumberish, newRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateBeneficiary"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newBeneficiary: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMaxCoverageAmount"
  ): TypedContractMethod<
    [policyType: BigNumberish, newAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateTreasuryAddress"
  ): TypedContractMethod<[newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPolicies"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "BeneficiaryUpdated"
  ): TypedContractEvent<
    BeneficiaryUpdatedEvent.InputTuple,
    BeneficiaryUpdatedEvent.OutputTuple,
    BeneficiaryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PolicyClaimed"
  ): TypedContractEvent<
    PolicyClaimedEvent.InputTuple,
    PolicyClaimedEvent.OutputTuple,
    PolicyClaimedEvent.OutputObject
  >;
  getEvent(
    key: "PolicyCreated"
  ): TypedContractEvent<
    PolicyCreatedEvent.InputTuple,
    PolicyCreatedEvent.OutputTuple,
    PolicyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PolicyRenewed"
  ): TypedContractEvent<
    PolicyRenewedEvent.InputTuple,
    PolicyRenewedEvent.OutputTuple,
    PolicyRenewedEvent.OutputObject
  >;
  getEvent(
    key: "PremiumPaid"
  ): TypedContractEvent<
    PremiumPaidEvent.InputTuple,
    PremiumPaidEvent.OutputTuple,
    PremiumPaidEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "BeneficiaryUpdated(uint256,address)": TypedContractEvent<
      BeneficiaryUpdatedEvent.InputTuple,
      BeneficiaryUpdatedEvent.OutputTuple,
      BeneficiaryUpdatedEvent.OutputObject
    >;
    BeneficiaryUpdated: TypedContractEvent<
      BeneficiaryUpdatedEvent.InputTuple,
      BeneficiaryUpdatedEvent.OutputTuple,
      BeneficiaryUpdatedEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PolicyClaimed(uint256,uint256,address)": TypedContractEvent<
      PolicyClaimedEvent.InputTuple,
      PolicyClaimedEvent.OutputTuple,
      PolicyClaimedEvent.OutputObject
    >;
    PolicyClaimed: TypedContractEvent<
      PolicyClaimedEvent.InputTuple,
      PolicyClaimedEvent.OutputTuple,
      PolicyClaimedEvent.OutputObject
    >;

    "PolicyCreated(uint256,address,uint8,uint256,uint256,uint256)": TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;
    PolicyCreated: TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;

    "PolicyRenewed(uint256,uint256,uint256)": TypedContractEvent<
      PolicyRenewedEvent.InputTuple,
      PolicyRenewedEvent.OutputTuple,
      PolicyRenewedEvent.OutputObject
    >;
    PolicyRenewed: TypedContractEvent<
      PolicyRenewedEvent.InputTuple,
      PolicyRenewedEvent.OutputTuple,
      PolicyRenewedEvent.OutputObject
    >;

    "PremiumPaid(uint256,uint256,address)": TypedContractEvent<
      PremiumPaidEvent.InputTuple,
      PremiumPaidEvent.OutputTuple,
      PremiumPaidEvent.OutputObject
    >;
    PremiumPaid: TypedContractEvent<
      PremiumPaidEvent.InputTuple,
      PremiumPaidEvent.OutputTuple,
      PremiumPaidEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
