/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ChainSureSurplusDistributor {
  export type SurplusCalculationStruct = {
    totalPremiums: BigNumberish;
    totalClaims: BigNumberish;
    operatingExpenses: BigNumberish;
    reinsuranceCosts: BigNumberish;
    reserveRequirement: BigNumberish;
    emergencyFundAllocation: BigNumberish;
    distributableSurplus: BigNumberish;
    timestamp: BigNumberish;
  };

  export type SurplusCalculationStructOutput = [
    totalPremiums: bigint,
    totalClaims: bigint,
    operatingExpenses: bigint,
    reinsuranceCosts: bigint,
    reserveRequirement: bigint,
    emergencyFundAllocation: bigint,
    distributableSurplus: bigint,
    timestamp: bigint
  ] & {
    totalPremiums: bigint;
    totalClaims: bigint;
    operatingExpenses: bigint;
    reinsuranceCosts: bigint;
    reserveRequirement: bigint;
    emergencyFundAllocation: bigint;
    distributableSurplus: bigint;
    timestamp: bigint;
  };
}

export interface ChainSureSurplusDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLAIM_PERIOD"
      | "DISTRIBUTION_LOCK_PERIOD"
      | "allocateEmergencyFunds"
      | "calculateAndDistributeSurplus"
      | "claimMultipleRewards"
      | "claimRewards"
      | "distributions"
      | "emergencyFund"
      | "emergencyFundRatio"
      | "finalizeDistribution"
      | "getDistributionAllocation"
      | "getSurplusHistory"
      | "getUnclaimedRewards"
      | "getUserDistributions"
      | "governanceToken"
      | "governanceTokenWeight"
      | "hasClaimedDistribution"
      | "lastReinsurancePayment"
      | "minimumDistributionAmount"
      | "nextDistributionId"
      | "owner"
      | "pause"
      | "paused"
      | "policyNFT"
      | "policyholderBonus"
      | "recoverExpiredDistributions"
      | "reinsuranceProvider"
      | "reinsuranceRatio"
      | "reinsuranceReserve"
      | "renounceOwnership"
      | "reserveRatio"
      | "stablecoin"
      | "surplusHistory"
      | "totalDistributed"
      | "transferOwnership"
      | "unclaimedRewards"
      | "unpause"
      | "updateDistributionParameters"
      | "updateMinimumDistributionAmount"
      | "updateReinsuranceProvider"
      | "userDistributions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimProcessed"
      | "ClaimSubmitted"
      | "DistributionExecuted"
      | "EmergencyFundAllocated"
      | "OwnershipTransferred"
      | "Paused"
      | "ReinsurancePremiumPaid"
      | "SurplusCalculated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLAIM_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DISTRIBUTION_LOCK_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allocateEmergencyFunds",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAndDistributeSurplus",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMultipleRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyFundRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeDistribution",
    values: [BigNumberish, AddressLike[], BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionAllocation",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSurplusHistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDistributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceTokenWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimedDistribution",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastReinsurancePayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumDistributionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextDistributionId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "policyNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "policyholderBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverExpiredDistributions",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reinsuranceProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reinsuranceRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reinsuranceReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "surplusHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateDistributionParameters",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumDistributionAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReinsuranceProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userDistributions",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLAIM_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DISTRIBUTION_LOCK_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocateEmergencyFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAndDistributeSurplus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMultipleRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyFundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSurplusHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceTokenWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastReinsurancePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumDistributionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextDistributionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "policyholderBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverExpiredDistributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinsuranceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinsuranceRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinsuranceReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "surplusHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDistributionParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumDistributionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReinsuranceProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDistributions",
    data: BytesLike
  ): Result;
}

export namespace ClaimProcessedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    distributionId: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    distributionId: bigint
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    distributionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimSubmittedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    distributionId: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    distributionId: bigint
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    distributionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionExecutedEvent {
  export type InputTuple = [
    distributionId: BigNumberish,
    totalAmount: BigNumberish,
    recipients: BigNumberish
  ];
  export type OutputTuple = [
    distributionId: bigint,
    totalAmount: bigint,
    recipients: bigint
  ];
  export interface OutputObject {
    distributionId: bigint;
    totalAmount: bigint;
    recipients: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyFundAllocatedEvent {
  export type InputTuple = [amount: BigNumberish, reason: string];
  export type OutputTuple = [amount: bigint, reason: string];
  export interface OutputObject {
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReinsurancePremiumPaidEvent {
  export type InputTuple = [amount: BigNumberish, reinsurer: AddressLike];
  export type OutputTuple = [amount: bigint, reinsurer: string];
  export interface OutputObject {
    amount: bigint;
    reinsurer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SurplusCalculatedEvent {
  export type InputTuple = [
    totalSurplus: BigNumberish,
    distributableSurplus: BigNumberish,
    reserveAllocation: BigNumberish
  ];
  export type OutputTuple = [
    totalSurplus: bigint,
    distributableSurplus: bigint,
    reserveAllocation: bigint
  ];
  export interface OutputObject {
    totalSurplus: bigint;
    distributableSurplus: bigint;
    reserveAllocation: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainSureSurplusDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): ChainSureSurplusDistributor;
  waitForDeployment(): Promise<this>;

  interface: ChainSureSurplusDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLAIM_PERIOD: TypedContractMethod<[], [bigint], "view">;

  DISTRIBUTION_LOCK_PERIOD: TypedContractMethod<[], [bigint], "view">;

  allocateEmergencyFunds: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  calculateAndDistributeSurplus: TypedContractMethod<
    [
      totalPremiums: BigNumberish,
      totalClaims: BigNumberish,
      operatingExpenses: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  claimMultipleRewards: TypedContractMethod<
    [distributionIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimRewards: TypedContractMethod<
    [distributionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  distributions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        distributionId: bigint;
        totalAmount: bigint;
        timestamp: bigint;
        snapshotBlock: bigint;
        governanceTokenSupply: bigint;
        totalPolicyholders: bigint;
        finalized: boolean;
      }
    ],
    "view"
  >;

  emergencyFund: TypedContractMethod<[], [bigint], "view">;

  emergencyFundRatio: TypedContractMethod<[], [bigint], "view">;

  finalizeDistribution: TypedContractMethod<
    [
      distributionId: BigNumberish,
      governanceHolders: AddressLike[],
      balances: BigNumberish[],
      policyholders: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  getDistributionAllocation: TypedContractMethod<
    [distributionId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;

  getSurplusHistory: TypedContractMethod<
    [],
    [ChainSureSurplusDistributor.SurplusCalculationStructOutput[]],
    "view"
  >;

  getUnclaimedRewards: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserDistributions: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  governanceToken: TypedContractMethod<[], [string], "view">;

  governanceTokenWeight: TypedContractMethod<[], [bigint], "view">;

  hasClaimedDistribution: TypedContractMethod<
    [distributionId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  lastReinsurancePayment: TypedContractMethod<[], [bigint], "view">;

  minimumDistributionAmount: TypedContractMethod<[], [bigint], "view">;

  nextDistributionId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  policyNFT: TypedContractMethod<[], [string], "view">;

  policyholderBonus: TypedContractMethod<[], [bigint], "view">;

  recoverExpiredDistributions: TypedContractMethod<
    [distributionIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  reinsuranceProvider: TypedContractMethod<[], [string], "view">;

  reinsuranceRatio: TypedContractMethod<[], [bigint], "view">;

  reinsuranceReserve: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reserveRatio: TypedContractMethod<[], [bigint], "view">;

  stablecoin: TypedContractMethod<[], [string], "view">;

  surplusHistory: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalPremiums: bigint;
        totalClaims: bigint;
        operatingExpenses: bigint;
        reinsuranceCosts: bigint;
        reserveRequirement: bigint;
        emergencyFundAllocation: bigint;
        distributableSurplus: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  totalDistributed: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unclaimedRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateDistributionParameters: TypedContractMethod<
    [
      _governanceTokenWeight: BigNumberish,
      _policyholderBonus: BigNumberish,
      _reserveRatio: BigNumberish,
      _emergencyFundRatio: BigNumberish,
      _reinsuranceRatio: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateMinimumDistributionAmount: TypedContractMethod<
    [newAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateReinsuranceProvider: TypedContractMethod<
    [newProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  userDistributions: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLAIM_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DISTRIBUTION_LOCK_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allocateEmergencyFunds"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateAndDistributeSurplus"
  ): TypedContractMethod<
    [
      totalPremiums: BigNumberish,
      totalClaims: BigNumberish,
      operatingExpenses: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimMultipleRewards"
  ): TypedContractMethod<
    [distributionIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[distributionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        distributionId: bigint;
        totalAmount: bigint;
        timestamp: bigint;
        snapshotBlock: bigint;
        governanceTokenSupply: bigint;
        totalPolicyholders: bigint;
        finalized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyFund"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyFundRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "finalizeDistribution"
  ): TypedContractMethod<
    [
      distributionId: BigNumberish,
      governanceHolders: AddressLike[],
      balances: BigNumberish[],
      policyholders: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDistributionAllocation"
  ): TypedContractMethod<
    [distributionId: BigNumberish, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSurplusHistory"
  ): TypedContractMethod<
    [],
    [ChainSureSurplusDistributor.SurplusCalculationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUnclaimedRewards"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserDistributions"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "governanceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "governanceTokenWeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasClaimedDistribution"
  ): TypedContractMethod<
    [distributionId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastReinsurancePayment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumDistributionAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextDistributionId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "policyNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "policyholderBonus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recoverExpiredDistributions"
  ): TypedContractMethod<
    [distributionIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reinsuranceProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reinsuranceRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reinsuranceReserve"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reserveRatio"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stablecoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "surplusHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalPremiums: bigint;
        totalClaims: bigint;
        operatingExpenses: bigint;
        reinsuranceCosts: bigint;
        reserveRequirement: bigint;
        emergencyFundAllocation: bigint;
        distributableSurplus: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unclaimedRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDistributionParameters"
  ): TypedContractMethod<
    [
      _governanceTokenWeight: BigNumberish,
      _policyholderBonus: BigNumberish,
      _reserveRatio: BigNumberish,
      _emergencyFundRatio: BigNumberish,
      _reinsuranceRatio: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMinimumDistributionAmount"
  ): TypedContractMethod<[newAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReinsuranceProvider"
  ): TypedContractMethod<[newProvider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userDistributions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "ClaimProcessed"
  ): TypedContractEvent<
    ClaimProcessedEvent.InputTuple,
    ClaimProcessedEvent.OutputTuple,
    ClaimProcessedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimSubmitted"
  ): TypedContractEvent<
    ClaimSubmittedEvent.InputTuple,
    ClaimSubmittedEvent.OutputTuple,
    ClaimSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "DistributionExecuted"
  ): TypedContractEvent<
    DistributionExecutedEvent.InputTuple,
    DistributionExecutedEvent.OutputTuple,
    DistributionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyFundAllocated"
  ): TypedContractEvent<
    EmergencyFundAllocatedEvent.InputTuple,
    EmergencyFundAllocatedEvent.OutputTuple,
    EmergencyFundAllocatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReinsurancePremiumPaid"
  ): TypedContractEvent<
    ReinsurancePremiumPaidEvent.InputTuple,
    ReinsurancePremiumPaidEvent.OutputTuple,
    ReinsurancePremiumPaidEvent.OutputObject
  >;
  getEvent(
    key: "SurplusCalculated"
  ): TypedContractEvent<
    SurplusCalculatedEvent.InputTuple,
    SurplusCalculatedEvent.OutputTuple,
    SurplusCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ClaimProcessed(address,uint256,uint256)": TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;
    ClaimProcessed: TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;

    "ClaimSubmitted(address,uint256,uint256)": TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;
    ClaimSubmitted: TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;

    "DistributionExecuted(uint256,uint256,uint256)": TypedContractEvent<
      DistributionExecutedEvent.InputTuple,
      DistributionExecutedEvent.OutputTuple,
      DistributionExecutedEvent.OutputObject
    >;
    DistributionExecuted: TypedContractEvent<
      DistributionExecutedEvent.InputTuple,
      DistributionExecutedEvent.OutputTuple,
      DistributionExecutedEvent.OutputObject
    >;

    "EmergencyFundAllocated(uint256,string)": TypedContractEvent<
      EmergencyFundAllocatedEvent.InputTuple,
      EmergencyFundAllocatedEvent.OutputTuple,
      EmergencyFundAllocatedEvent.OutputObject
    >;
    EmergencyFundAllocated: TypedContractEvent<
      EmergencyFundAllocatedEvent.InputTuple,
      EmergencyFundAllocatedEvent.OutputTuple,
      EmergencyFundAllocatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReinsurancePremiumPaid(uint256,address)": TypedContractEvent<
      ReinsurancePremiumPaidEvent.InputTuple,
      ReinsurancePremiumPaidEvent.OutputTuple,
      ReinsurancePremiumPaidEvent.OutputObject
    >;
    ReinsurancePremiumPaid: TypedContractEvent<
      ReinsurancePremiumPaidEvent.InputTuple,
      ReinsurancePremiumPaidEvent.OutputTuple,
      ReinsurancePremiumPaidEvent.OutputObject
    >;

    "SurplusCalculated(uint256,uint256,uint256)": TypedContractEvent<
      SurplusCalculatedEvent.InputTuple,
      SurplusCalculatedEvent.OutputTuple,
      SurplusCalculatedEvent.OutputObject
    >;
    SurplusCalculated: TypedContractEvent<
      SurplusCalculatedEvent.InputTuple,
      SurplusCalculatedEvent.OutputTuple,
      SurplusCalculatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
