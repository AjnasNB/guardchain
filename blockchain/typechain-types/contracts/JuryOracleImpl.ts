/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IJuryOracle {
  export type VoteInputStruct = {
    payoutBps: BigNumberish;
    confidenceBps: BigNumberish;
    rationaleHash: BytesLike;
    stakeTier: BigNumberish;
    locality: BigNumberish;
    expertise: BigNumberish;
  };

  export type VoteInputStructOutput = [
    payoutBps: bigint,
    confidenceBps: bigint,
    rationaleHash: string,
    stakeTier: bigint,
    locality: bigint,
    expertise: bigint
  ] & {
    payoutBps: bigint;
    confidenceBps: bigint;
    rationaleHash: string;
    stakeTier: bigint;
    locality: bigint;
    expertise: bigint;
  };
}

export interface JuryOracleImplInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "claimsEngine"
      | "deadlines"
      | "getPanel"
      | "getVote"
      | "governanceToken"
      | "panels"
      | "selectPanel"
      | "submitVote"
      | "voteSubmitted"
      | "votes"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PanelSelected" | "VoteCast"): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimsEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deadlines",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getPanel", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "panels",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selectPanel",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [BytesLike, IJuryOracle.VoteInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "voteSubmitted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimsEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deadlines", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPanel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "panels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selectPanel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteSubmitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
}

export namespace PanelSelectedEvent {
  export type InputTuple = [
    claimId: BytesLike,
    jurors: AddressLike[],
    seed: BytesLike
  ];
  export type OutputTuple = [claimId: string, jurors: string[], seed: string];
  export interface OutputObject {
    claimId: string;
    jurors: string[];
    seed: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    claimId: BytesLike,
    juror: AddressLike,
    payoutBps: BigNumberish,
    confidenceBps: BigNumberish,
    rationaleHash: BytesLike
  ];
  export type OutputTuple = [
    claimId: string,
    juror: string,
    payoutBps: bigint,
    confidenceBps: bigint,
    rationaleHash: string
  ];
  export interface OutputObject {
    claimId: string;
    juror: string;
    payoutBps: bigint;
    confidenceBps: bigint;
    rationaleHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JuryOracleImpl extends BaseContract {
  connect(runner?: ContractRunner | null): JuryOracleImpl;
  waitForDeployment(): Promise<this>;

  interface: JuryOracleImplInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  claimsEngine: TypedContractMethod<[], [string], "view">;

  deadlines: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  getPanel: TypedContractMethod<
    [claimId: BytesLike],
    [[string[], bigint] & { jurors: string[]; deadline: bigint }],
    "view"
  >;

  getVote: TypedContractMethod<
    [claimId: BytesLike, juror: AddressLike],
    [
      [IJuryOracle.VoteInputStructOutput, boolean] & {
        input: IJuryOracle.VoteInputStructOutput;
        exists: boolean;
      }
    ],
    "view"
  >;

  governanceToken: TypedContractMethod<[], [string], "view">;

  panels: TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  selectPanel: TypedContractMethod<
    [claimId: BytesLike, seed: BytesLike],
    [void],
    "nonpayable"
  >;

  submitVote: TypedContractMethod<
    [claimId: BytesLike, input: IJuryOracle.VoteInputStruct],
    [void],
    "nonpayable"
  >;

  voteSubmitted: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  votes: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [
      [bigint, bigint, string, bigint, bigint, bigint] & {
        payoutBps: bigint;
        confidenceBps: bigint;
        rationaleHash: string;
        stakeTier: bigint;
        locality: bigint;
        expertise: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimsEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deadlines"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPanel"
  ): TypedContractMethod<
    [claimId: BytesLike],
    [[string[], bigint] & { jurors: string[]; deadline: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVote"
  ): TypedContractMethod<
    [claimId: BytesLike, juror: AddressLike],
    [
      [IJuryOracle.VoteInputStructOutput, boolean] & {
        input: IJuryOracle.VoteInputStructOutput;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "governanceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "panels"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "selectPanel"
  ): TypedContractMethod<
    [claimId: BytesLike, seed: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitVote"
  ): TypedContractMethod<
    [claimId: BytesLike, input: IJuryOracle.VoteInputStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteSubmitted"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [
      [bigint, bigint, string, bigint, bigint, bigint] & {
        payoutBps: bigint;
        confidenceBps: bigint;
        rationaleHash: string;
        stakeTier: bigint;
        locality: bigint;
        expertise: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "PanelSelected"
  ): TypedContractEvent<
    PanelSelectedEvent.InputTuple,
    PanelSelectedEvent.OutputTuple,
    PanelSelectedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "PanelSelected(bytes32,address[],bytes32)": TypedContractEvent<
      PanelSelectedEvent.InputTuple,
      PanelSelectedEvent.OutputTuple,
      PanelSelectedEvent.OutputObject
    >;
    PanelSelected: TypedContractEvent<
      PanelSelectedEvent.InputTuple,
      PanelSelectedEvent.OutputTuple,
      PanelSelectedEvent.OutputObject
    >;

    "VoteCast(bytes32,address,uint16,uint16,bytes32)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
