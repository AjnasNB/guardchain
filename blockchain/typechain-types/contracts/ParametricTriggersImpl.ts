/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IParametricTriggers {
  export type TriggerConditionStruct = {
    oracle: AddressLike;
    dataFeedId: BytesLike;
    threshold: BigNumberish;
    comparisonType: BigNumberish;
    payoutAmount: BigNumberish;
    active: boolean;
  };

  export type TriggerConditionStructOutput = [
    oracle: string,
    dataFeedId: string,
    threshold: bigint,
    comparisonType: bigint,
    payoutAmount: bigint,
    active: boolean
  ] & {
    oracle: string;
    dataFeedId: string;
    threshold: bigint;
    comparisonType: bigint;
    payoutAmount: bigint;
    active: boolean;
  };

  export type PolicyTriggersStruct = {
    policyId: BytesLike;
    conditions: IParametricTriggers.TriggerConditionStruct[];
    totalPayoutCap: BigNumberish;
    usedPayout: BigNumberish;
    active: boolean;
  };

  export type PolicyTriggersStructOutput = [
    policyId: string,
    conditions: IParametricTriggers.TriggerConditionStructOutput[],
    totalPayoutCap: bigint,
    usedPayout: bigint,
    active: boolean
  ] & {
    policyId: string;
    conditions: IParametricTriggers.TriggerConditionStructOutput[];
    totalPayoutCap: bigint;
    usedPayout: bigint;
    active: boolean;
  };
}

export interface ParametricTriggersImplInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTriggerCondition"
      | "admin"
      | "checkTriggers"
      | "claimsEngine"
      | "executeParametricPayout"
      | "getAvailablePayout"
      | "getPolicyTriggers"
      | "hasActiveTriggers"
      | "policyExists"
      | "policyTriggers"
      | "removeTriggerCondition"
      | "stablecoin"
      | "vrfCoordinator"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ParametricPayout" | "TriggerActivated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTriggerCondition",
    values: [BytesLike, IParametricTriggers.TriggerConditionStruct]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkTriggers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimsEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeParametricPayout",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailablePayout",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicyTriggers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasActiveTriggers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "policyExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "policyTriggers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTriggerCondition",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vrfCoordinator",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addTriggerCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkTriggers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimsEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeParametricPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailablePayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPolicyTriggers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasActiveTriggers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyTriggers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTriggerCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vrfCoordinator",
    data: BytesLike
  ): Result;
}

export namespace ParametricPayoutEvent {
  export type InputTuple = [
    policyId: BytesLike,
    beneficiary: AddressLike,
    amount: BigNumberish,
    transactionHash: BytesLike
  ];
  export type OutputTuple = [
    policyId: string,
    beneficiary: string,
    amount: bigint,
    transactionHash: string
  ];
  export interface OutputObject {
    policyId: string;
    beneficiary: string;
    amount: bigint;
    transactionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TriggerActivatedEvent {
  export type InputTuple = [
    policyId: BytesLike,
    conditionId: BytesLike,
    payoutAmount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    policyId: string,
    conditionId: string,
    payoutAmount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    policyId: string;
    conditionId: string;
    payoutAmount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ParametricTriggersImpl extends BaseContract {
  connect(runner?: ContractRunner | null): ParametricTriggersImpl;
  waitForDeployment(): Promise<this>;

  interface: ParametricTriggersImplInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTriggerCondition: TypedContractMethod<
    [
      policyId: BytesLike,
      condition: IParametricTriggers.TriggerConditionStruct
    ],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  checkTriggers: TypedContractMethod<
    [policyId: BytesLike],
    [boolean],
    "nonpayable"
  >;

  claimsEngine: TypedContractMethod<[], [string], "view">;

  executeParametricPayout: TypedContractMethod<
    [policyId: BytesLike, beneficiary: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAvailablePayout: TypedContractMethod<
    [policyId: BytesLike],
    [bigint],
    "view"
  >;

  getPolicyTriggers: TypedContractMethod<
    [policyId: BytesLike],
    [IParametricTriggers.PolicyTriggersStructOutput],
    "view"
  >;

  hasActiveTriggers: TypedContractMethod<
    [policyId: BytesLike],
    [boolean],
    "view"
  >;

  policyExists: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  policyTriggers: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean] & {
        policyId: string;
        totalPayoutCap: bigint;
        usedPayout: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  removeTriggerCondition: TypedContractMethod<
    [policyId: BytesLike, conditionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  stablecoin: TypedContractMethod<[], [string], "view">;

  vrfCoordinator: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTriggerCondition"
  ): TypedContractMethod<
    [
      policyId: BytesLike,
      condition: IParametricTriggers.TriggerConditionStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkTriggers"
  ): TypedContractMethod<[policyId: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "claimsEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeParametricPayout"
  ): TypedContractMethod<
    [policyId: BytesLike, beneficiary: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailablePayout"
  ): TypedContractMethod<[policyId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPolicyTriggers"
  ): TypedContractMethod<
    [policyId: BytesLike],
    [IParametricTriggers.PolicyTriggersStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasActiveTriggers"
  ): TypedContractMethod<[policyId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "policyExists"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "policyTriggers"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, boolean] & {
        policyId: string;
        totalPayoutCap: bigint;
        usedPayout: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeTriggerCondition"
  ): TypedContractMethod<
    [policyId: BytesLike, conditionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stablecoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vrfCoordinator"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ParametricPayout"
  ): TypedContractEvent<
    ParametricPayoutEvent.InputTuple,
    ParametricPayoutEvent.OutputTuple,
    ParametricPayoutEvent.OutputObject
  >;
  getEvent(
    key: "TriggerActivated"
  ): TypedContractEvent<
    TriggerActivatedEvent.InputTuple,
    TriggerActivatedEvent.OutputTuple,
    TriggerActivatedEvent.OutputObject
  >;

  filters: {
    "ParametricPayout(bytes32,address,uint256,bytes32)": TypedContractEvent<
      ParametricPayoutEvent.InputTuple,
      ParametricPayoutEvent.OutputTuple,
      ParametricPayoutEvent.OutputObject
    >;
    ParametricPayout: TypedContractEvent<
      ParametricPayoutEvent.InputTuple,
      ParametricPayoutEvent.OutputTuple,
      ParametricPayoutEvent.OutputObject
    >;

    "TriggerActivated(bytes32,bytes32,uint256,uint256)": TypedContractEvent<
      TriggerActivatedEvent.InputTuple,
      TriggerActivatedEvent.OutputTuple,
      TriggerActivatedEvent.OutputObject
    >;
    TriggerActivated: TypedContractEvent<
      TriggerActivatedEvent.InputTuple,
      TriggerActivatedEvent.OutputTuple,
      TriggerActivatedEvent.OutputObject
    >;
  };
}
