/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ChainSureClaimsEngine {
  export type ClaimStruct = {
    claimId: BigNumberish;
    policyId: BigNumberish;
    claimant: AddressLike;
    claimType: BigNumberish;
    status: BigNumberish;
    processingType: BigNumberish;
    requestedAmount: BigNumberish;
    approvedAmount: BigNumberish;
    submissionTime: BigNumberish;
    votingDeadline: BigNumberish;
    description: string;
    evidenceHashes: string[];
    aiAnalysisHash: BytesLike;
    fraudScore: BigNumberish;
  };

  export type ClaimStructOutput = [
    claimId: bigint,
    policyId: bigint,
    claimant: string,
    claimType: bigint,
    status: bigint,
    processingType: bigint,
    requestedAmount: bigint,
    approvedAmount: bigint,
    submissionTime: bigint,
    votingDeadline: bigint,
    description: string,
    evidenceHashes: string[],
    aiAnalysisHash: string,
    fraudScore: bigint
  ] & {
    claimId: bigint;
    policyId: bigint;
    claimant: string;
    claimType: bigint;
    status: bigint;
    processingType: bigint;
    requestedAmount: bigint;
    approvedAmount: bigint;
    submissionTime: bigint;
    votingDeadline: bigint;
    description: string;
    evidenceHashes: string[];
    aiAnalysisHash: string;
    fraudScore: bigint;
  };

  export type VoteStruct = {
    juror: AddressLike;
    approved: boolean;
    suggestedAmount: BigNumberish;
    timestamp: BigNumberish;
    justification: string;
  };

  export type VoteStructOutput = [
    juror: string,
    approved: boolean,
    suggestedAmount: bigint,
    timestamp: bigint,
    justification: string
  ] & {
    juror: string;
    approved: boolean;
    suggestedAmount: bigint;
    timestamp: bigint;
    justification: string;
  };
}

export interface ChainSureClaimsEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "AI_FRAUD_THRESHOLD"
      | "CONSENSUS_THRESHOLD"
      | "MAX_JURY_SIZE"
      | "MIN_JURY_SIZE"
      | "VOTING_PERIOD"
      | "addAuthorizedOracle"
      | "aiServiceEndpoint"
      | "authorizedOracles"
      | "castVote"
      | "claims"
      | "finalizeVoting"
      | "getClaim"
      | "getJurorVote"
      | "getJuryVoting"
      | "governanceToken"
      | "jurorRewards"
      | "juryThresholds"
      | "juryVotings"
      | "nextClaimId"
      | "owner"
      | "parametricThresholds"
      | "pause"
      | "paused"
      | "policyNFT"
      | "processParametricClaim"
      | "removeAuthorizedOracle"
      | "renounceOwnership"
      | "stablecoin"
      | "submitAIAnalysis"
      | "submitClaim"
      | "totalClaimsProcessed"
      | "totalPayoutAmount"
      | "transferOwnership"
      | "unpause"
      | "updateAIServiceEndpoint"
      | "updateJuryThreshold"
      | "updateParametricThreshold"
      | "withdrawJurorRewards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimApproved"
      | "ClaimProcessed"
      | "ClaimRejected"
      | "ClaimSubmitted"
      | "FraudDetected"
      | "JurySelected"
      | "OracleUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "AI_FRAUD_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONSENSUS_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_JURY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_JURY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAuthorizedOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "aiServiceEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedOracles",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJurorVote",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getJuryVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jurorRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "juryThresholds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "juryVotings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parametricThresholds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "policyNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processParametricClaim",
    values: [BigNumberish, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthorizedOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitAIAnalysis",
    values: [BigNumberish, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimsProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPayoutAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAIServiceEndpoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateJuryThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParametricThreshold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawJurorRewards",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AI_FRAUD_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CONSENSUS_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_JURY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_JURY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAuthorizedOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aiServiceEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getJurorVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getJuryVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jurorRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "juryThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "juryVotings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parametricThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processParametricClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthorizedOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitAIAnalysis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPayoutAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAIServiceEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateJuryThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParametricThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawJurorRewards",
    data: BytesLike
  ): Result;
}

export namespace ClaimApprovedEvent {
  export type InputTuple = [
    claimId: BigNumberish,
    payoutAmount: BigNumberish,
    processingType: BigNumberish
  ];
  export type OutputTuple = [
    claimId: bigint,
    payoutAmount: bigint,
    processingType: bigint
  ];
  export interface OutputObject {
    claimId: bigint;
    payoutAmount: bigint;
    processingType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimProcessedEvent {
  export type InputTuple = [
    claimId: BigNumberish,
    approved: boolean,
    finalAmount: BigNumberish
  ];
  export type OutputTuple = [
    claimId: bigint,
    approved: boolean,
    finalAmount: bigint
  ];
  export interface OutputObject {
    claimId: bigint;
    approved: boolean;
    finalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRejectedEvent {
  export type InputTuple = [claimId: BigNumberish, reason: string];
  export type OutputTuple = [claimId: bigint, reason: string];
  export interface OutputObject {
    claimId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimSubmittedEvent {
  export type InputTuple = [
    claimId: BigNumberish,
    policyId: BigNumberish,
    claimant: AddressLike,
    claimType: BigNumberish,
    requestedAmount: BigNumberish
  ];
  export type OutputTuple = [
    claimId: bigint,
    policyId: bigint,
    claimant: string,
    claimType: bigint,
    requestedAmount: bigint
  ];
  export interface OutputObject {
    claimId: bigint;
    policyId: bigint;
    claimant: string;
    claimType: bigint;
    requestedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FraudDetectedEvent {
  export type InputTuple = [
    claimId: BigNumberish,
    fraudScore: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    claimId: bigint,
    fraudScore: bigint,
    reason: string
  ];
  export interface OutputObject {
    claimId: bigint;
    fraudScore: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JurySelectedEvent {
  export type InputTuple = [claimId: BigNumberish, jurors: AddressLike[]];
  export type OutputTuple = [claimId: bigint, jurors: string[]];
  export interface OutputObject {
    claimId: bigint;
    jurors: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [oracle: AddressLike, enabled: boolean];
  export type OutputTuple = [oracle: string, enabled: boolean];
  export interface OutputObject {
    oracle: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    claimId: BigNumberish,
    juror: AddressLike,
    approved: boolean,
    suggestedAmount: BigNumberish
  ];
  export type OutputTuple = [
    claimId: bigint,
    juror: string,
    approved: boolean,
    suggestedAmount: bigint
  ];
  export interface OutputObject {
    claimId: bigint;
    juror: string;
    approved: boolean;
    suggestedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainSureClaimsEngine extends BaseContract {
  connect(runner?: ContractRunner | null): ChainSureClaimsEngine;
  waitForDeployment(): Promise<this>;

  interface: ChainSureClaimsEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  AI_FRAUD_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  CONSENSUS_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  MAX_JURY_SIZE: TypedContractMethod<[], [bigint], "view">;

  MIN_JURY_SIZE: TypedContractMethod<[], [bigint], "view">;

  VOTING_PERIOD: TypedContractMethod<[], [bigint], "view">;

  addAuthorizedOracle: TypedContractMethod<
    [oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  aiServiceEndpoint: TypedContractMethod<[], [string], "view">;

  authorizedOracles: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  castVote: TypedContractMethod<
    [
      claimId: BigNumberish,
      approved: boolean,
      suggestedAmount: BigNumberish,
      justification: string
    ],
    [void],
    "nonpayable"
  >;

  claims: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        claimId: bigint;
        policyId: bigint;
        claimant: string;
        claimType: bigint;
        status: bigint;
        processingType: bigint;
        requestedAmount: bigint;
        approvedAmount: bigint;
        submissionTime: bigint;
        votingDeadline: bigint;
        description: string;
        aiAnalysisHash: string;
        fraudScore: bigint;
      }
    ],
    "view"
  >;

  finalizeVoting: TypedContractMethod<
    [claimId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getClaim: TypedContractMethod<
    [claimId: BigNumberish],
    [ChainSureClaimsEngine.ClaimStructOutput],
    "view"
  >;

  getJurorVote: TypedContractMethod<
    [claimId: BigNumberish, juror: AddressLike],
    [ChainSureClaimsEngine.VoteStructOutput],
    "view"
  >;

  getJuryVoting: TypedContractMethod<
    [claimId: BigNumberish],
    [
      [string[], bigint, bigint, bigint, bigint, boolean] & {
        jurors: string[];
        votesFor: bigint;
        votesAgainst: bigint;
        totalVotes: bigint;
        averageAmount: bigint;
        concluded: boolean;
      }
    ],
    "view"
  >;

  governanceToken: TypedContractMethod<[], [string], "view">;

  jurorRewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  juryThresholds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  juryVotings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        votesFor: bigint;
        votesAgainst: bigint;
        totalVotes: bigint;
        averageSuggestedAmount: bigint;
        concluded: boolean;
      }
    ],
    "view"
  >;

  nextClaimId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  parametricThresholds: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  policyNFT: TypedContractMethod<[], [string], "view">;

  processParametricClaim: TypedContractMethod<
    [claimId: BigNumberish, oracleData: BytesLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  removeAuthorizedOracle: TypedContractMethod<
    [oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stablecoin: TypedContractMethod<[], [string], "view">;

  submitAIAnalysis: TypedContractMethod<
    [
      claimId: BigNumberish,
      fraudScore: BigNumberish,
      analysisHash: BytesLike,
      recommendedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  submitClaim: TypedContractMethod<
    [
      policyId: BigNumberish,
      claimType: BigNumberish,
      requestedAmount: BigNumberish,
      description: string,
      evidenceHashes: string[]
    ],
    [bigint],
    "nonpayable"
  >;

  totalClaimsProcessed: TypedContractMethod<[], [bigint], "view">;

  totalPayoutAmount: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateAIServiceEndpoint: TypedContractMethod<
    [newEndpoint: AddressLike],
    [void],
    "nonpayable"
  >;

  updateJuryThreshold: TypedContractMethod<
    [claimType: BigNumberish, newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateParametricThreshold: TypedContractMethod<
    [claimType: BigNumberish, newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawJurorRewards: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "AI_FRAUD_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CONSENSUS_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_JURY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_JURY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addAuthorizedOracle"
  ): TypedContractMethod<[oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "aiServiceEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "authorizedOracles"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [
      claimId: BigNumberish,
      approved: boolean,
      suggestedAmount: BigNumberish,
      justification: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claims"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint
      ] & {
        claimId: bigint;
        policyId: bigint;
        claimant: string;
        claimType: bigint;
        status: bigint;
        processingType: bigint;
        requestedAmount: bigint;
        approvedAmount: bigint;
        submissionTime: bigint;
        votingDeadline: bigint;
        description: string;
        aiAnalysisHash: string;
        fraudScore: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "finalizeVoting"
  ): TypedContractMethod<[claimId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [claimId: BigNumberish],
    [ChainSureClaimsEngine.ClaimStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJurorVote"
  ): TypedContractMethod<
    [claimId: BigNumberish, juror: AddressLike],
    [ChainSureClaimsEngine.VoteStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJuryVoting"
  ): TypedContractMethod<
    [claimId: BigNumberish],
    [
      [string[], bigint, bigint, bigint, bigint, boolean] & {
        jurors: string[];
        votesFor: bigint;
        votesAgainst: bigint;
        totalVotes: bigint;
        averageAmount: bigint;
        concluded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "governanceToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "jurorRewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "juryThresholds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "juryVotings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        votesFor: bigint;
        votesAgainst: bigint;
        totalVotes: bigint;
        averageSuggestedAmount: bigint;
        concluded: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextClaimId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parametricThresholds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "policyNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processParametricClaim"
  ): TypedContractMethod<
    [claimId: BigNumberish, oracleData: BytesLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAuthorizedOracle"
  ): TypedContractMethod<[oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stablecoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "submitAIAnalysis"
  ): TypedContractMethod<
    [
      claimId: BigNumberish,
      fraudScore: BigNumberish,
      analysisHash: BytesLike,
      recommendedAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitClaim"
  ): TypedContractMethod<
    [
      policyId: BigNumberish,
      claimType: BigNumberish,
      requestedAmount: BigNumberish,
      description: string,
      evidenceHashes: string[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalClaimsProcessed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalPayoutAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAIServiceEndpoint"
  ): TypedContractMethod<[newEndpoint: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateJuryThreshold"
  ): TypedContractMethod<
    [claimType: BigNumberish, newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateParametricThreshold"
  ): TypedContractMethod<
    [claimType: BigNumberish, newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawJurorRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ClaimApproved"
  ): TypedContractEvent<
    ClaimApprovedEvent.InputTuple,
    ClaimApprovedEvent.OutputTuple,
    ClaimApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimProcessed"
  ): TypedContractEvent<
    ClaimProcessedEvent.InputTuple,
    ClaimProcessedEvent.OutputTuple,
    ClaimProcessedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRejected"
  ): TypedContractEvent<
    ClaimRejectedEvent.InputTuple,
    ClaimRejectedEvent.OutputTuple,
    ClaimRejectedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimSubmitted"
  ): TypedContractEvent<
    ClaimSubmittedEvent.InputTuple,
    ClaimSubmittedEvent.OutputTuple,
    ClaimSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "FraudDetected"
  ): TypedContractEvent<
    FraudDetectedEvent.InputTuple,
    FraudDetectedEvent.OutputTuple,
    FraudDetectedEvent.OutputObject
  >;
  getEvent(
    key: "JurySelected"
  ): TypedContractEvent<
    JurySelectedEvent.InputTuple,
    JurySelectedEvent.OutputTuple,
    JurySelectedEvent.OutputObject
  >;
  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "ClaimApproved(uint256,uint256,uint8)": TypedContractEvent<
      ClaimApprovedEvent.InputTuple,
      ClaimApprovedEvent.OutputTuple,
      ClaimApprovedEvent.OutputObject
    >;
    ClaimApproved: TypedContractEvent<
      ClaimApprovedEvent.InputTuple,
      ClaimApprovedEvent.OutputTuple,
      ClaimApprovedEvent.OutputObject
    >;

    "ClaimProcessed(uint256,bool,uint256)": TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;
    ClaimProcessed: TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;

    "ClaimRejected(uint256,string)": TypedContractEvent<
      ClaimRejectedEvent.InputTuple,
      ClaimRejectedEvent.OutputTuple,
      ClaimRejectedEvent.OutputObject
    >;
    ClaimRejected: TypedContractEvent<
      ClaimRejectedEvent.InputTuple,
      ClaimRejectedEvent.OutputTuple,
      ClaimRejectedEvent.OutputObject
    >;

    "ClaimSubmitted(uint256,uint256,address,uint8,uint256)": TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;
    ClaimSubmitted: TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;

    "FraudDetected(uint256,uint256,string)": TypedContractEvent<
      FraudDetectedEvent.InputTuple,
      FraudDetectedEvent.OutputTuple,
      FraudDetectedEvent.OutputObject
    >;
    FraudDetected: TypedContractEvent<
      FraudDetectedEvent.InputTuple,
      FraudDetectedEvent.OutputTuple,
      FraudDetectedEvent.OutputObject
    >;

    "JurySelected(uint256,address[])": TypedContractEvent<
      JurySelectedEvent.InputTuple,
      JurySelectedEvent.OutputTuple,
      JurySelectedEvent.OutputObject
    >;
    JurySelected: TypedContractEvent<
      JurySelectedEvent.InputTuple,
      JurySelectedEvent.OutputTuple,
      JurySelectedEvent.OutputObject
    >;

    "OracleUpdated(address,bool)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VoteCast(uint256,address,bool,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
