/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IAppealSystem {
  export type AppealRequestStruct = {
    claimId: BytesLike;
    appellant: AddressLike;
    reason: string;
    evidenceHash: BytesLike;
    timestamp: BigNumberish;
    processed: boolean;
  };

  export type AppealRequestStructOutput = [
    claimId: string,
    appellant: string,
    reason: string,
    evidenceHash: string,
    timestamp: bigint,
    processed: boolean
  ] & {
    claimId: string;
    appellant: string;
    reason: string;
    evidenceHash: string;
    timestamp: bigint;
    processed: boolean;
  };

  export type AppealJuryStruct = {
    jurors: AddressLike[];
    deadline: BigNumberish;
    requiredVotes: BigNumberish;
    concluded: boolean;
    payoutBps: BigNumberish;
  };

  export type AppealJuryStructOutput = [
    jurors: string[],
    deadline: bigint,
    requiredVotes: bigint,
    concluded: boolean,
    payoutBps: bigint
  ] & {
    jurors: string[];
    deadline: bigint;
    requiredVotes: bigint;
    concluded: boolean;
    payoutBps: bigint;
  };
}

export interface AppealSystemImplInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "appealExists"
      | "appealJuries"
      | "appeals"
      | "canFileAppeal"
      | "claimsEngine"
      | "fileAppeal"
      | "getAppeal"
      | "getAppealJury"
      | "getReputationWeightedJurors"
      | "governance"
      | "juryOracle"
      | "selectAppealJury"
      | "submitAppealVote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AppealConcluded"
      | "AppealFiled"
      | "AppealJurySelected"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "appealExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "appealJuries",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "appeals", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "canFileAppeal",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimsEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fileAppeal",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppeal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppealJury",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationWeightedJurors",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "juryOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectAppealJury",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAppealVote",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "appealExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appealJuries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appeals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canFileAppeal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimsEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fileAppeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAppeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAppealJury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationWeightedJurors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "juryOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selectAppealJury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAppealVote",
    data: BytesLike
  ): Result;
}

export namespace AppealConcludedEvent {
  export type InputTuple = [
    claimId: BytesLike,
    payoutBps: BigNumberish,
    approved: boolean
  ];
  export type OutputTuple = [
    claimId: string,
    payoutBps: bigint,
    approved: boolean
  ];
  export interface OutputObject {
    claimId: string;
    payoutBps: bigint;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppealFiledEvent {
  export type InputTuple = [
    claimId: BytesLike,
    appellant: AddressLike,
    reason: string,
    evidenceHash: BytesLike
  ];
  export type OutputTuple = [
    claimId: string,
    appellant: string,
    reason: string,
    evidenceHash: string
  ];
  export interface OutputObject {
    claimId: string;
    appellant: string;
    reason: string;
    evidenceHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AppealJurySelectedEvent {
  export type InputTuple = [
    claimId: BytesLike,
    jurors: AddressLike[],
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    claimId: string,
    jurors: string[],
    deadline: bigint
  ];
  export interface OutputObject {
    claimId: string;
    jurors: string[];
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AppealSystemImpl extends BaseContract {
  connect(runner?: ContractRunner | null): AppealSystemImpl;
  waitForDeployment(): Promise<this>;

  interface: AppealSystemImplInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  appealExists: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  appealJuries: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, boolean, bigint] & {
        deadline: bigint;
        requiredVotes: bigint;
        concluded: boolean;
        payoutBps: bigint;
      }
    ],
    "view"
  >;

  appeals: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, bigint, boolean] & {
        claimId: string;
        appellant: string;
        reason: string;
        evidenceHash: string;
        timestamp: bigint;
        processed: boolean;
      }
    ],
    "view"
  >;

  canFileAppeal: TypedContractMethod<
    [claimId: BytesLike, user: AddressLike],
    [boolean],
    "view"
  >;

  claimsEngine: TypedContractMethod<[], [string], "view">;

  fileAppeal: TypedContractMethod<
    [claimId: BytesLike, reason: string, evidenceHash: BytesLike],
    [void],
    "nonpayable"
  >;

  getAppeal: TypedContractMethod<
    [claimId: BytesLike],
    [IAppealSystem.AppealRequestStructOutput],
    "view"
  >;

  getAppealJury: TypedContractMethod<
    [claimId: BytesLike],
    [IAppealSystem.AppealJuryStructOutput],
    "view"
  >;

  getReputationWeightedJurors: TypedContractMethod<
    [claimId: BytesLike, count: BigNumberish],
    [string[]],
    "view"
  >;

  governance: TypedContractMethod<[], [string], "view">;

  juryOracle: TypedContractMethod<[], [string], "view">;

  selectAppealJury: TypedContractMethod<
    [claimId: BytesLike, seed: BytesLike],
    [void],
    "nonpayable"
  >;

  submitAppealVote: TypedContractMethod<
    [
      claimId: BytesLike,
      payoutBps: BigNumberish,
      confidenceBps: BigNumberish,
      rationaleHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "appealExists"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "appealJuries"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, boolean, bigint] & {
        deadline: bigint;
        requiredVotes: bigint;
        concluded: boolean;
        payoutBps: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "appeals"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, bigint, boolean] & {
        claimId: string;
        appellant: string;
        reason: string;
        evidenceHash: string;
        timestamp: bigint;
        processed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "canFileAppeal"
  ): TypedContractMethod<
    [claimId: BytesLike, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimsEngine"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fileAppeal"
  ): TypedContractMethod<
    [claimId: BytesLike, reason: string, evidenceHash: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAppeal"
  ): TypedContractMethod<
    [claimId: BytesLike],
    [IAppealSystem.AppealRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAppealJury"
  ): TypedContractMethod<
    [claimId: BytesLike],
    [IAppealSystem.AppealJuryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReputationWeightedJurors"
  ): TypedContractMethod<
    [claimId: BytesLike, count: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "governance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "juryOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "selectAppealJury"
  ): TypedContractMethod<
    [claimId: BytesLike, seed: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitAppealVote"
  ): TypedContractMethod<
    [
      claimId: BytesLike,
      payoutBps: BigNumberish,
      confidenceBps: BigNumberish,
      rationaleHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AppealConcluded"
  ): TypedContractEvent<
    AppealConcludedEvent.InputTuple,
    AppealConcludedEvent.OutputTuple,
    AppealConcludedEvent.OutputObject
  >;
  getEvent(
    key: "AppealFiled"
  ): TypedContractEvent<
    AppealFiledEvent.InputTuple,
    AppealFiledEvent.OutputTuple,
    AppealFiledEvent.OutputObject
  >;
  getEvent(
    key: "AppealJurySelected"
  ): TypedContractEvent<
    AppealJurySelectedEvent.InputTuple,
    AppealJurySelectedEvent.OutputTuple,
    AppealJurySelectedEvent.OutputObject
  >;

  filters: {
    "AppealConcluded(bytes32,uint16,bool)": TypedContractEvent<
      AppealConcludedEvent.InputTuple,
      AppealConcludedEvent.OutputTuple,
      AppealConcludedEvent.OutputObject
    >;
    AppealConcluded: TypedContractEvent<
      AppealConcludedEvent.InputTuple,
      AppealConcludedEvent.OutputTuple,
      AppealConcludedEvent.OutputObject
    >;

    "AppealFiled(bytes32,address,string,bytes32)": TypedContractEvent<
      AppealFiledEvent.InputTuple,
      AppealFiledEvent.OutputTuple,
      AppealFiledEvent.OutputObject
    >;
    AppealFiled: TypedContractEvent<
      AppealFiledEvent.InputTuple,
      AppealFiledEvent.OutputTuple,
      AppealFiledEvent.OutputObject
    >;

    "AppealJurySelected(bytes32,address[],uint64)": TypedContractEvent<
      AppealJurySelectedEvent.InputTuple,
      AppealJurySelectedEvent.OutputTuple,
      AppealJurySelectedEvent.OutputObject
    >;
    AppealJurySelected: TypedContractEvent<
      AppealJurySelectedEvent.InputTuple,
      AppealJurySelectedEvent.OutputTuple,
      AppealJurySelectedEvent.OutputObject
    >;
  };
}
